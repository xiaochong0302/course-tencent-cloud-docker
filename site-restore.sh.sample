#!/usr/bin/env bash

#基准目录
base_dir=~

#站点名称
site_name=ctc-docker

#ctc-docker目录
ctc_docker_dir=${base_dir}/${site_name}

#ctc-docker备份文件
ctc_docker_tar=${base_dir}/${site_name}.tar.gz

#普通信息输出
normal_print() {
  echo -e "\033[34m \n $1 \n \033[0m"
}

#成功信息输出
success_print() {
  echo -e "\033[32m \n $1 \n \033[0m"
}

#失败信息输出
error_print() {
  echo -e "\033[31m \n $1 \n \033[0m"
}

#系统判断
os_type() {
  os=$(grep "^ID=" /etc/os-release)
  if [[ ${os} =~ 'centos' ]]; then
    echo 'centos'
  elif [[ ${os} =~ 'ubuntu' ]]; then
    echo 'ubuntu'
  elif [[ ${os} =~ 'debian' ]]; then
    echo 'debian'
  else
    echo 'other'
  fi
}

#判断root用户
if [[ $EUID -ne 0 ]]; then
  error_print "------ error: this script must be run as root ------"
  exit 1
fi

#判断系统架构
if [[ "$(uname -m)" != "x86_64" ]]; then
    error_print "------ we only support x86_64 architecture currently ------"
    exit 1
fi

normal_print "------ update host system ------"

#安装git和curl
if [ "$(os_type)" = 'ubuntu' ] || [ "$(os_type)" = 'debian' ]; then
  sudo apt-get update && apt-get install -y curl git
elif [ "$(os_type)" = 'centos' ]; then
  sudo yum update && yum install -y curl git
else
  error_print "------ we only support (ubuntu|debian|centos) currently ------"
  exit 1
fi

if [ ! -e ${ctc_docker_tar} ]; then
  error_print "------ error: ctc-docker.tar.gz not found ------"
  exit 1
fi

normal_print "------ tar -xzf ctc-docker.tar.gz ------"

#解压ctc-docker.tar.gz
cd ${base_dir} && tar -xzf ${site_name}.tar.gz

#加入git安全目录
git config --global --add safe.directory ${ctc_docker_dir}/html/ctc

normal_print "------ install docker ------"

#安装docker
if [ -z "$(command -v docker)" ]; then
  sudo bash ${ctc_docker_dir}/get-docker.sh --mirror Aliyun
fi

if [ -z "$(command -v docker)" ]; then
  error_print "------ error: docker command not found, please try again ------"
  exit 1
fi

if [ ! -d '/etc/docker' ]; then
  sudo mkdir -p '/etc/docker'
fi

#docker镜像加速
if [ ! -e '/etc/docker/daemon.json' ]; then
  tee -a /etc/docker/daemon.json <<-EOF
{
  "registry-mirrors": [
    "https://mirror.ccs.tencentyun.com"
  ],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "500m",
    "max-file": "3"
  }
}
EOF
  sudo systemctl daemon-reload
  sudo systemctl restart docker
  sudo chmod 666 /var/run/docker.sock
fi

normal_print "------ install docker-compose ------"

docker_compose_url="https://download.koogua.com/docker-compose-linux-x86_64"

#安装docker-compose
if [ -z "$(command -v docker-compose)" ]; then
  sudo curl --retry 3 --retry-delay 5 --retry-max-time 30 "${docker_compose_url}" -o /usr/local/bin/docker-compose
  sudo chmod +x /usr/local/bin/docker-compose
fi

if [ -z "$(command -v docker-compose)" ]; then
  error_print "------ error: docker-compose command not found, please try again ------"
  exit 1
fi

#切换目录
cd ${ctc_docker_dir} || exit

normal_print "------ build docker images ------"

docker-compose up -d

docker_ps=$(docker ps)

if [[ "${docker_ps}" =~ 'nginx' ]]; then
  success_print "------ nginx service ok ------"
else
  error_print "------ nginx service failed ------"
fi

if [[ "${docker_ps}" =~ 'php' ]]; then
  success_print "------ php service ok ------"
else
  error_print "------ php service failed ------"
fi

if [[ "${docker_ps}" =~ 'mysql' ]]; then
  success_print "------ mysql service ok ------"
else
  error_print "------ mysql service failed ------"
fi

if [[ "${docker_ps}" =~ 'redis' ]]; then
  success_print "------ redis service ok ------"
else
  error_print "------ redis service failed ------"
fi

if [[ "${docker_ps}" =~ 'xunsearch' ]]; then
  success_print "------ xunsearch service ok ------"
else
  error_print "------ xunsearch service failed ------"
fi
